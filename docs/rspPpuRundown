This document explains what was involved so far in my attempt to emulate the Gameboy's Pixel Processining Unit (PPU) on the N64 RSP.

**CPU**
Once the CPU has loaded the RSP script in to IMEM,  it them provides it with a bunch of memory addresses that the RSP will need, such as the location of 
the Gameboy's VRAM, and the address of the N64's Frame Buffer.  Currently it does that the really dodgy way of using a linker script to enforce a 
shared memory address where once-off configuration can DMA'd from.    Turns out that the CPU can just write directly to DMEM, so sooner or 
later I'll fix it to just do that.  

When the emulation starts, the CPU then sets the flag to start the RSP running and tracks the PPU mode until it gets to H-Blank.  
Any time VRAM is written to, I set a flag.  Come H-Blank, I need to make sure that D-Cache is written back to DRAM so that the RSP can DMA in 
the most recent values in OAM, VRAM and the IO registers.  For OAM and HRAM this doesn't make much of a splash, but VRAM is quite a big chunk of 
memory and can take time, so the flag ensures I only do the cache write-back when necessary.  
After that, I can wait for the RSP to finish rendering the previous line by checking the semaphores at 0xA4040000, then tell it that the CPU has 
hit H-Blank by setting a different semaphore at that address.

Oh the CPU also raises/lowers another semaphore to indicate which of the two frame buffers the RSP/RDP should be writing to.

**RSP**
What I've got here is a long way from being fully optimised, but hopefully it gives you some ideas.

So the CPU ensures that the RSP knows where to find the VRAM, I/O registers and OAM of the emulated gameboy, as well as an address set aside in DRAM to write data to
for the RDP to use and the address of the two frame buffers.  The CPU also lets the RSP know whenever it's in H-Blank.

The RSP waits for H-Blank and then DMAs in all the relevant I/O registers and caches a few of the most often used values in registers

Next, it DMAs in the section of the background tile map in VRAM representing the current scan-line and one by one DMAs each tile that would appear on that line (adjusting for SCX etc.)
and puts the data that would appear on that scan-line in to a buffer.

Next up is where the Vector unit comes in to play. The gameboy tile data is stored as abcdefgh ABCDEFGH but for the N64 to do anything with those aB bits it needs them next to
each other ie aAbBcCdD eEfFgGhH.  So I load the same 16bytes from the buffer in to 8 of the vector registers and shift the bits as needed.  This lets me shift the bits of 8 pixels at a time
eg. $v01 shifts the bits so that you end up with a register that contains 0b000000a A00000000... for 8 pixels and $v02 ends up as 0b0000000b B0000000...
Then I put the data back in to memory using the suv instruction which only takes bits 14-7.

Iterate through the bits using an index to determine the correct place in the output buffer, translating to colour palette values as appropriate, 
and setting a bit if the colour was in position 0 for determining transparency.

Do more or less the same thing again for the Window and something similar for any sprites that appear on that scan line 
(though I haven't figured out how to use the VU to  speed up the sprites yet).

Now that I have a full scan-line of pixels, we DMA this back to DRAM and now it's the RDP's turn to take over.

**RDP**
The RSP sends commands for the RDP to do the following

* Set the appropriate output frame buffer address (SetColorImage)
* Set the location that we DMA'd the scan-line buffer to as the RDPs texture location. (SetTextureImage)
* Set up a tile to draw the appropriate size, various other options. (SetTile)
* Load the scan line buffer in to TMEM (LoadTile)
* Draw the scan line (TextureRectangle)

(For the DMG implementation at least, I need to figure out how to use TLUT as well to save a few instructins translating 2bpp into n64 colours.)



