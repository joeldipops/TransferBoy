# https://www.zeuthen.desy.de/unix/unixguide/infohtml/binutils/docs/as/Pseudo-Ops.html

#ifndef RSP_INC_INCLUDED
#define RSP_INC_INCLUDED

.set noreorder

# co-processor 0 registers
.set $c0,  $0
.set $c1,  $1
.set $c2,  $2
.set $c3,  $3
.set $c4,  $4
.set $c5,  $5
.set $c6,  $6
.set $c7,  $7
.set $c8,  $8
.set $c9,  $9
.set $c10, $10
.set $c11, $11
.set $c12, $12
.set $c13, $13
.set $c14, $14
.set $c15, $15

# co-processor 0 register descriptions.
.set $DMA_DMEM,         $c0
.set $DMA_DRAM,         $c1
.set $DMA_IN_LENGTH,    $c2
.set $DMA_OUT_LENGTH,   $c3
.set $RSP_STATUS,       $c4
.set $DMA_FULL,         $c5
.set $DMA_BUSY,         $c6
.set $RSP_RESERVED,     $c7
.set $RDP_CMD_START,    $c8
.set $RDP_CMD_END,      $c9
.set $RDP_CMD_CURRENT,  $c10
.set $RDP_CMD_STATUS,   $c11
.set $RDP_CMD_CLOCK,    $c12
.set $RDP_CMD_BUSY,     $c13
.set $RDP_CMD_PIPE_BUSY,$c14
.set $RDP_CMD_TMEM_BUSY,$c15

.equ DRAM_RDP_DMA, 1
.equ DMEM_RDP_DMA, 2
.equ RDP_DMA_BUSY, 0x0100

# primary accumulator
.set $zero, $0
.set $at,   $1

# function return values
.set $r0,   $2
.set $r1,   $3

# function arguments
.set $a0,   $4
.set $a1,   $5
.set $a2,   $6
.set $a3,   $7

.set $t0,   $8
.set $t1,   $9
.set $t2,   $10
.set $t3,   $11
.set $t4,   $12
.set $t5,   $13
.set $t6,   $14
.set $t7,   $15

.set $s0,   $16
.set $s1,   $17
.set $s2,   $18
.set $s3,   $19
.set $s4,   $20
.set $s5,   $21
.set $s6,   $22
.set $s7,   $23

# We have so little memory, so intead of more temporary regs, a few more saved regs go a long way.
.set $s8,   $24
.set $s9,   $25

# There's no kernal, so no need for kernal reigsters
.set $s10,  $26
.set $s11,  $27

# We'll keep a stack pointer just in case, but other pointers aren't gonna be used.
.set $t8,  $28
.set $t9,  $29
.set $sp,   $30
.set $ra,   $31

###
# Push the previous function call details on to the stack.
# @param argCount number of arguments to keep track of.
# @note supports up to 4 arguments.
###
.macro stackPush argCount
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    .if \argCount > 0
        sw $a0, 0($sp)
        addi $sp, $sp, -4
    .endif
    .if \argCount > 1
        sw $a1, 0($sp)
        addi $sp, $sp, -4
    .endif
    .if \argCount > 2
        sw $a2, 0($sp)
        addi $sp, $sp, -4
    .endif
    .if \argCount > 3
        sw $a3, 0($sp)
        addi $sp, $sp, -4
    .endif
.endm

###
# Pop the top function call details off the stack.
# @param argCount number of arguments expected with the call.
# @note supports up to 4 arguments.
###
.macro stackPop argCount
    .if \argCount > 3
        addi $sp, $sp, 4
        lw $a30, 0($sp)
    .endif
    .if \argCount > 2
        addi $sp, $sp, 4
        lw $a2, 0($sp)
    .endif
    .if \argCount > 1
        addi $sp, $sp, 4
        lw $a1, 0($sp)
    .endif
    .if \argCount > 0
        addi $sp, $sp, 4
        lw $a0, 0($sp)
    .endif
    addi $sp, $sp, 4
    lw $ra, 0($sp)
.endm

###
# Load Immediate Word
# loads a 32bit immediate value into register.
# @input \reg Register to load.
# @input \word Value to load.
###
.macro liw reg word
    lui \reg, \word >> 16
    ori \reg, \reg, \word & 0xFFFF
.endm

###
# Store Immediate Word
###
.macro siw const addr reg
    addi $at, $0, \const
    sw $at, \addr(\reg)
.endm

###
# See dmaIn macro below
###
_dmaIn:
    # Don't do anything until DMA is no longer busy
    1:
        mfc0 $t0, $RSP_RESERVED
    bne $t0, $0, 1b
      nop

    2:
        mfc0 $t0, $DMA_FULL
    bne $t0, $0, 2b
      nop

    # Set source.
    mtc0 $a0, $DMA_DRAM

    # Set destination
    mtc0 $a1, $DMA_DMEM

    # set length (which kicks off DMA)
    addi $a2, $a2, -1
    mtc0 $a2, $DMA_IN_LENGTH

    # wait for DMA to complete
    3:
        mfc0 $t0, $DMA_BUSY
    bne $t0, $0, 3b
    nop

    # release the flag
    jr $ra
      mtc0 $0, $RSP_RESERVED # delay slot

###
# Writes to the three DMA registers to kick off a transfer
# from DRAM to DMEM then waits for it to complete.
#
# @input source Holds the source address in DRAM
# @input dest Holds the destination adress in DMEM
# @input length Holds the length of data to transfer.
###
.macro dmaIn source, dest, length
    add $a0, $0, \source
    addi $a1, $0, \dest
    addi $a2, $0, \length
    jal _dmaIn
      nop
.endm

.macro dmaIn_destR source, dest, length
    add $a0, $0, \source
    add $a1, $0, \dest
    addi $a2, $0, \length
    jal _dmaIn
      nop
.endm



###
# See dmaOut macro below
###
_dmaOut:
    # Don't do anything until DMA is not busy.
    1:
        mfc0 $t0, $RSP_RESERVED
    bne $t0, $0, 1b
      nop

    2:
        mfc0 $t0, $DMA_FULL
    bne $t0, $0, 2b
      nop

    # Set source.
    mtc0 $a0, $DMA_DMEM

    # Set destination
    mtc0 $a1, $DMA_DRAM

    # set length (which kicks off DMA)
    addi $a2, $a2, -1
    mtc0 $a2, $DMA_OUT_LENGTH

    # wait for DMA to complete
    3:
        mfc0 $t0, $DMA_BUSY
    bne $t0, $0, 3b
      nop

    jr $ra
      # release the flag
      mtc0 $0, $RSP_RESERVED # delay slot.


###
# Writes to the three DMA registers to kick off a transfer
# from DMEM to DRAM then then waits for it to complete.
#
# @input source The source address in DMEM
# @input dest The destination adress in DRAM
# @input length The length of data to transfer.
###
.macro dmaOut source, dest, length
    addi $a0, $0, \source
    add $a1, $0, \dest
    addi $a2, $0, \length
    jal _dmaOut
      nop
.endm
#endif