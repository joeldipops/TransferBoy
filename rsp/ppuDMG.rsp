#include <ucode.S>
#include "../global.h"
#include "init.rsp"
#include "rspIncludes.rsp"
#include "rdp.rsp"

###------------------------------------------
# Renders a scan line of the gameboy screen.
#
###------------------------------------------

###
# Constants
###

# OAM Structure
.eqv Oam_Y_BLOCK, 0x00
.eqv Oam_X_BLOCK, 0x01
.eqv Oam_TILE_INDEX, 0x02
.eqv Oam_FLAGS, 0x03

# Oam_FLAGS Structure
.eqv Oam_PRIORITY,  0b10000000
.eqv Oam_Y_FLIP,    0b01000000
.eqv Oam_X_FLIP,    0b00100000

.eqv OAM_X_OFFSET, 0x08
.eqv OAM_Y_OFFSET, 0x10

.eqv OAM_SIZE, 0xA0
.eqv TILE_WIDTH, 0x08
.eqv TILE_SIZE, 0x10 # 8x8 2b pixels is 16B
.eqv SPRITE_COUNT, OAM_SIZE / 4 # 40 sprites in OAM
.eqv SPRITE_LIMIT, 0x0A # 10 sprites per scanline

# RSP Interface Structure
.eqv RspIn_OAM_ADDRESS, 0x00
.eqv RspIn_VRAM_TILE_DATA_ADDRESS, 0x04
.eqv RspIn_VRAM_TILE_INDEX_ADDRESS, 0x08
.eqv RspIn_PPU_SETTINGS_ADDRESS, 0x0C
.eqv RspIn_OUT_ADDRESS, 0x10
.eqv RspIn_SCREEN_POSITION, 0x14
.eqv RspIn_RECTANGLE_SIZE, 0x18
.eqv RspIn_IS_BUSY, 0x1C

.eqv INTERFACE_SIZE, 0x20

# PPU Settings Structure
## These are the gameboy LCD registers.

.eqv Ppu_LCD_CONTROL, 0x00
.eqv Ppu_LCD_STATUS, 0x01
.eqv Ppu_BACKGROUND_SCROLL_Y, 0x02
.eqv Ppu_BACKGROUND_SCROLL_X, 0x03
.eqv Ppu_CURRENT_LINE, 0x04         # This is the line we're drawing.
.eqv Ppu_NEXT_INTERRUPT_LINE, 0x05  # Probably not important.  Interrupts to be handled elsewhere?
.eqv Ppu_DMA_SOURCE, 0x06
.eqv Ppu_BACKGROUND_PALETTE, 0x07
.eqv Ppu_SPRITE_PALETTE_0, 0x08
.eqv Ppu_SPRITE_PALETTE_1, 0x09
.eqv Ppu_WINDOW_TOP, 0x0A
.eqv Ppu_WINDOW_LEFT, 0x0B
.eqv PPU_SETTINGS_SIZE, 0x10

# LCDC Flags structure
.eqv Lcdc_LCD_SWITCH,           0b10000000
.eqv Lcdc_WINDOW_TILE_MAP,      0b01000000
.eqv Lcdc_WINDOW_SWITCH,        0b00100000
.eqv Lcdc_TILE_DATA,            0b00010000
.eqv Lcdc_BACKGROUND_TILE_MAP,  0b00001000
.eqv Lcdc_SPRITE_SIZE,          0b00000100
.eqv Lcdc_SPRITE_SWITCH,        0b00000010
.eqv Lcdc_LCD_PRIORITY,         0b00000001

.eqv DMEM_SIZE, 0x1000
.eqv BUFFER_SIZE, GB_LCD_WIDTH * 2 # ( x2 for 16bit colours)


.eqv CacheEntry_HEADER, 0x00
.eqv CacheEntry_DATA, 0x04
.eqv CACHE_ENTRY_SIZE, 0x14

.eqv TILE_CACHE_ENTRIES, 50

###
# Memory Map
###
.eqv TILE_CACHE, 0xBD0      # 50 possible tiles with 16B/tile assuming 2b colour.
.eqv PPU_SETTINGS, 0x0EF0
.eqv INPUT, 0x0F00
.eqv OAM_CACHE, 0x0F40      # 10 OAM entries per scanline at 4B/entry
.eqv OAM_MIRROR, 0x0F50
.eqv MONOCHROME_PALETTE, 0x0FF0

### Palette Values

.eqv LIGHTEST,0x0000FFFF
.eqv LIGHTER, 0x0000A529
.eqv DARKER,  0x00005295
.eqv DARKEST, 0x00000001



###
# Register aliases
###

# Address to store massaged pixels where they will be picked up by the RDP
.set $OUT_BUFFER_ADDRESS, $s0

# Number of pixels left to render in current iteration.
.set $PIXEL_COUNTER, $s1

# Address to place next processed gameboy pixel in DMEM
.set $N64_BUFFER_POINTER, $s2

# Cached Height may not be necessary
.set $RECTANGLE_HEIGHT, $s3

# Cached value of LCDC bit 2 flag
.set $IS_8x16_MODE, $s4

# Left and Top position of line to render.
.set $START_POSITION, $s5

# Length & Width of the line to draw in N64 pixels so it can be scaled.
.set $RECTANGLE_SIZE, $s6

.set $SCAN_LINE, $s7

.set $CACHE_POINTER, $s8

.set $VRAM_TILE_DATA_ADDRESS, $s9

.set $GB_BUFFER_POINTER, $s10

###
# Takes a 2bit DMG colour index and converts to a 16bit n64 colour.
#
# @input a0 the dmg colour index (0 - 3)
# @output r0 the 16bit dmg colour.
###
massageMonochrome:
    # zero out irrelevant bits
    andi $a0, $a0, 3
    # and multiply by four since we deal with 32bit addresses
    sll $a0, $a0, 2
    lw $r0, MONOCHROME_PALETTE($a0)
    jr $ra

###
# Gets the address of a tile.
# Either from the cache or the tile is DMA'd in and cached.
# @input $a0 The tile ID.
# @output $r0 Pointer to the tile data.
###
cacheGetTile:
    .set $tileId, $a0
    .set $pointer, $a1
    .set $entry, $a2

    # Start at the current end of the cache and work back to the start.
    add $pointer, $0, $CACHE_POINTER

    .whileNotFound:
        addi $pointer, $0, -1 * CACHE_ENTRY_SIZE

        # Check if tile id matches cache entry header.
        lw $t0, 0($pointer)
        bne $t0, $tileId, .whileNotFound_continue

            # We've found it. Return a pointer to the data.
            addi $r0, $pointer, 0x04
            jr $ra

        .whileNotFound_continue:
        # Check that $pointer is still greater than the bottom of the cache
        addi $t0, $pointer, -1 * TILE_CACHE
    bgtz $t0, .whileNotFound

    # Tile isn't in the cache yet, so we need to DMA it in.

    ## Set the tile id at the cache pointer then increment it
    sw $tileId, 0($CACHE_POINTER)
    addi $CACHE_POINTER, $CACHE_POINTER, 0x04

    ## Multiply tile ID by 16 to get address offset.
    sll $tileId, $tileId, 4
    ## Which is added to the address base.
    add $tileId, $tileId, $VRAM_TILE_DATA_ADDRESS

    dmaIn_destR $a0, $CACHE_POINTER, TILE_SIZE

    ## Increment cache pointer to the next empty entry.
    addi $CACHE_POINTER, $CACHE_POINTER, TILE_SIZE

    add $r0, $a0, $0
    jr $ra

.set $tileId, 0
.set $pointer, 0

###
# Sets in DMEM up to 10 OAM entries for sprites that will appear on this scan line.
###
.macro transferOAM
    .set $screenSpritesRemaining, $t1
    .set $lineSpritesRemaining, $t2
    .set $y1, $t3
    .set $y2, $t4
    .set $entry, $t5

    ## Find the sprites relevant to the current scanline so we don't have to loop through 40 sprites every pixel.

    lw $t0, (INPUT + RspIn_OAM_ADDRESS)($0)
    dmaIn $t0, OAM_MIRROR, OAM_SIZE

    addi $screenSpritesRemaining, $0, SPRITE_COUNT
    addi $lineSpritesRemaining, $0, SPRITE_LIMIT
    .whileHasOam:
        # Load the OAM for the current sprite

        ## Figure out what sprite we are on.
        addi $t0, $0, SPRITE_COUNT
        sub $t0, $t0, $screenSpritesRemaining
        ## Multiply by four to get the address offset.
        sll $t0, $t0, 2
        lw $entry, OAM_MIRROR($t0)

        ## We care about the Y position, which is the lowest byte
        andi $y1, $entry, 0x000000FF

        # Test that the sprite will appear on this scanline
        addi $y1, $0, OAM_Y_OFFSET

        ## $t3 is lower bound, $t0 is upper bound.  Double it if 8x16 mode is on.
        addi $y2, $y1, 8
        beq $IS_8x16_MODE, $0, 1f
            addi $y2, $y2, 8
        1:

        ## if bottom of the sprite is greater than the current scan line, we don't need to render it here.
        sub $t0, $y1, $SCAN_LINE
        # Gotta shift by 16 both times because OAM starts at scan line -16
        addi $t0, $t0, -1 * OAM_Y_OFFSET
        bgtz $t0, .whileHasOam_continue

        ## if top of the sprite is less than the current scan line, skip that too.
        sub $t0, $SCAN_LINE, $y2
        addi $t0, $t0, OAM_Y_OFFSET
        bgtz $t0, .whileHasOam_continue

            # Cache a sprite that exists on this scan line.

            ## Calculate the destination offset to cache at.
            addi $t0, $0, SPRITE_LIMIT
            sub $t0, $t0, $lineSpritesRemaining
            sll $t0, $t0, 2

            ## And cache it
            sw $entry, OAM_CACHE($t0)

            # There is a limit of 10 sprites per scanline.
            ## Once we've found that many relevant sprites, we're done.

            ## I believe that the limit should actually be done from left to right (i think), but assumption is most 
            ## code won't break the limit anyway.
            ## Will create a job to improve accuracy of this once general case is working.
            addi $lineSpritesRemaining, $lineSpritesRemaining, -1
            bgtz $lineSpritesRemaining, .whileHasOam_break

        .whileHasOam_continue:

        addi $screenSpritesRemaining, $screenSpritesRemaining, -1
        bgtz $screenSpritesRemaining, .whileHasOam
    .whileHasOam_break:

    .set $spriteCounter, $t1
    .set $spriteCount, $t2
    addi $t0, $0, SPRITE_LIMIT
    sub $spriteCount, $t0, $lineSpritesRemaining
    add $spriteCounter, $0, $spriteCount

    # Set them all to 0 so we'll error if try to use them as registers.
    .set $screenSpritesRemaining, 0
    .set $lineSpritesRemaining, 0
    .set $y1, 0
    .set $y2, 0
.endm

###
# Draws pixels for the window if it appears on this scanline.
###
.macro processWindow
    nop
.endm

### Draws pixels for the background.
.macro processBackground
    nop
.endm


###
# Draws any sprites that apear on this scanline
###
.macro processSprites
    .set $entry, $t3
    .set $x1, $t4
    .set $x2, $t5

    # Loop through the oam cache
    .whileHasSprites:
        # Get the relevant OAM entry
        sub $t0, $spriteCount, $spriteCounter
        ## Multiply by 4 to get the address offset.
        sll $t0, $t0, 2
        lw $entry, OAM_CACHE($t0)

        # Does this sprite appear in this x position?
        andi $x1, $t0, OAM_X_OFFSET
        addi $x2, $x1, TILE_WIDTH

        ## if left of the sprite is greater than the current pixel, we're not interested right now.
        sub $t0, $x1, $PIXEL_COUNTER
        ## Gotta shift by 8, OAM starts at x-loc -8
        addi $t0, $t0, -1 * OAM_X_OFFSET
        bgtz $t0, .whileHasSprites_continue

        ## if right of the sprite is less than the current pixel, skip that too.
        sub $t0, $PIXEL_COUNTER, $x2
        add $t0, $t0, OAM_X_OFFSET
        bgtz $t0, .whileHasSprites_continue

            # Get the tile index from the OAM entry.
            liw $t0, 0x00FF0000
            and $t0, $entry, $t0
            srl $t0, $t0, 16
            # And the tile data from the cache.
            add $a0, $0, $entry
            jal cacheGetTile

            # For the visible width of this sprite
                # Find the pixel that correlates to this x position.
                # Check it against the palette
                # Check it against priority

                # add it to the buffer.
                sw $r0, 0($GB_BUFFER_POINTER)

                # update indices
                addi $GB_BUFFER_POINTER, $GB_BUFFER_POINTER, 0x02
                addi $PIXEL_COUNTER, $PIXEL_COUNTER, -1

        .whileHasSprites_continue:
        addi $spriteCounter, $spriteCounter, -1
    bgtz $spriteCounter, .whileHasSprites

    .set $entry, 0
    .set $x1, 0
    .set $x2, 0
.endm

###
# Sets the RDP to draw red rectangles.
main:
    # Initialise rendering of the line.

    ## Initialise some registers with constants.
    ## TODO - allow this cache to persist across scan-lines.
    addi $CACHE_POINTER, $0, TILE_CACHE

    ## Bring in the configuration.
    liw $t0, RSP_INTERFACE_ADDRESS
    dmaIn $t0, DMEM_GB_BASE, INTERFACE_SIZE

    ## Stash config in some registers so whole memory space is available.
    lw $OUT_BUFFER_ADDRESS, RspIn_OUT_ADDRESS($0)
    lw $START_POSITION, RspIn_SCREEN_POSITION($0)
    lw $RECTANGLE_SIZE, RspIn_RECTANGLE_SIZE($0)
    andi $RECTANGLE_HEIGHT, $RECTANGLE_SIZE, 0x0000FFFF

    ## Set up monochrome colour palette in memory
    liw $t0, LIGHTEST
    sw $t0, MONOCHROME_PALETTE($0)
    liw $t0, LIGHTER
    sw $t0, (MONOCHROME_PALETTE + 4)($0)
    liw $t0, DARKER
    sw $t0, (MONOCHROME_PALETTE + 8)($0)
    liw $t0, DARKEST
    sw $t0, (MONOCHROME_PALETTE + 0xC)($0)

    # Load and cache the gameboy LCD registers.
    lw $t0, (RSP_INTERFACE_ADDRESS + RspIn_PPU_SETTINGS_ADDRESS)($0)
    dmaIn $t0, PPU_SETTINGS, PPU_SETTINGS_SIZE

    ## Cache the current scan line.
    lw $SCAN_LINE, (PPU_SETTINGS + Ppu_CURRENT_LINE)($0)

    ## Cache if we're in 8x16 sprite mode.
    lw $IS_8x16_MODE, (PPU_SETTINGS + Ppu_LCD_CONTROL)($0)
    andi $IS_8x16_MODE, $IS_8x16_MODE, Lcdc_SPRITE_SIZE
    srl $IS_8x16_MODE, $IS_8x16_MODE, 2

    # Build up this scanline to a buffer than can be rendered as a texture.

    transferOAM

    addi $PIXEL_COUNTER, $0, GB_LCD_WIDTH
    .whileHasPixels:
        ## Draw the window
        processWindow

        ## Then the background
        processBackground

        # Finally draw sprites
        processSprites


        # .................. Go through VRAM...
        # .....................Massage the colours to n64 16bit colours.

        addi $PIXEL_COUNTER, $PIXEL_COUNTER, -1

    # end loop
    bgtz $PIXEL_COUNTER, .whileHasPixels


    # Ask the RDP to render the line we just built.

    ## Sync before loading a new texture.
    syncPipe

    ## DMA the data back to DRAM so that the RDP can pick it up.
    dmaOut DMEM_GB_BASE, $OUT_BUFFER_ADDRESS, BUFFER_SIZE

    ## Tell RDP where to look for texture data.
    setTextureImage RGBA_FORMAT, COLOUR_DEPTH_16, GB_LCD_WIDTH, $OUT_BUFFER_ADDRESS

    ## Set up a tile now that the RDP has the data.
    setTile 1, RGBA_FORMAT, COLOUR_DEPTH_16, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    ## Give tile a size & shape
    loadTile 1, 0, 0, GB_LCD_WIDTH, 1

    # Calculate where to draw the line.
    add $a0, $START_POSITION, $0
    srl $a0, $a0, 16
    andi $a1, $START_POSITION, 0x0000FFFF

    add $a2, $RECTANGLE_SIZE, $0
    srl $a2, $a2, 16

    add $a2, $a2, $a0
    add $a3, $RECTANGLE_HEIGHT, $a1

    ## Draw a rectangle with the texture we have set up
    textureRectangle 1, $a0, $a1, $a2, $a3, 0, 0, 2048, 512


    # Clean-up now that we're done.

    ## Reset DRAM flag that says we're done with this work.
    sw $0, RspIn_IS_BUSY($0)

    liw $t0, RSP_INTERFACE_ADDRESS
    dmaOut DMEM_GB_BASE, $t0, INTERFACE_SIZE

# job done
stall:
    nop
    j stall

break
# Fill remainder with break instruction
#.org 2048, 0x0000000D
